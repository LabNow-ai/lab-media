name: qpod-media-lab

on:
  push:
    branches: [ main ]
    paths-ignore:
      - "*.md"

  pull_request:
    branches: [ main ]
    paths-ignore:
      - "*.md"

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
  DOCKER_REGISTRY_USER: ${{ secrets.DOCKER_REGISTRY_USER }}
  DOCKER_REGISTRY_PASSWORD: ${{ secrets.DOCKER_REGISTRY_PASSWORD }}

jobs:
  qpod_nvidia-docker2:
    name: qpod/nvidia-docker2
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - run: source ./tool.sh && build_image nvidia-docker2 latest		docker_nvidia-docker2/Dockerfile		&& push_image

  qpod_OpenCV:
    name: qpod/opencv
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - run: source ./tool.sh && build_image opencv latest				docker_OpenCV/Dockerfile				&& push_image


  qpod_PaddleOCR_cuda102:
    name: qpod/paddleocr_cuda102
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - run: source ./tool.sh && build_image paddleocr-cuda102 latest	docker_PaddleOCR/Dockerfile --build-arg "BASE_IMG=paddle-cuda102"		&& push_image

  qpod_PaddleOCR_cuda116:
    name: qpod/paddleocr_cuda116
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - run: |
          source ./tool.sh
          build_image paddleocr-cuda116 latest	docker_PaddleOCR/Dockerfile --build-arg "BASE_IMG=paddle-cuda116" && push_image
          build_image paddleocr-models  latest	docker_PaddleOCR/models.Dockerfile --build-arg "BASE_IMG=paddleocr-cuda116" && push_image


  qpod_OpenFace-src:
    name: qpod/openface-src
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - run: source ./tool.sh && build_image openface-src latest		docker_OpenFace/src.Dockerfile			&& push_image

  qpod_OpenFace:
    name: qpod/openface
    needs: [ "qpod_OpenCV", "qpod_OpenFace-src" ]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - run: source ./tool.sh && build_image openface latest			docker_OpenFace/Dockerfile				&& push_image

  # To build HF model image for a single model, simple run: `build_image_hf_model bert-base-cased`
  qpod_HuggingFaceModels:
    name: qpod/huggingface-models
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - run: |
          source ./tool.sh
          build_image_hf_model() {
            HF_MODEL_NAME=$1; HF_MODEL_TAG=$(echo $1 | sed 's/\//./g');
            echo "HF model to pull and build image: ${HF_MODEL_NAME}..."
            build_image_no_tag huggingface-model ${HF_MODEL_TAG} docker_HuggingFace-models/Dockerfile --build-arg "HF_MODEL_NAME=${HF_MODEL_NAME}" ;
            push_image ;
          }
          export -f build_image_hf_model build_image_no_tag push_image
          LIST_MODELS=("LTP/tiny")
          # cat docker_HuggingFace-models/list_hf_models.txt | read -rd '' -a LIST_MODELS_BAK
          echo ${LIST_MODELS[@]}  | xargs -n1 -I {} bash -c 'build_image_hf_model "$@"' _ {} ;
